generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String
  email         String         @unique
  emailVerified Boolean        @default(false)
  image         String?
  role          UserRole       @default(user)
  reputation    Int            @default(0)
  bio           String?
  location      String?
  website       String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  banExpires    DateTime?
  banReason     String?
  banned        Boolean?
  accounts      Account[]
  answers       Answer[]
  comments      Comment[]
  notifications Notification[]
  questions     Question[]
  sessions      Session[]
  tagsFollowed  TagsOnUsers[]
  UserBadges    UserBadges[]
  votes         Vote[]
  // Community relations
  communitiesOwned Community[] @relation("CommunityOwner")
  communityMemberships CommunityMembers[] @relation("CommunityMember")

  @@map("user")
}

model Session {
  id             String   @id @default(cuid())
  expiresAt      DateTime
  token          String   @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  ipAddress      String?
  userAgent      String?
  userId         String
  impersonatedBy String?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@map("account")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, value])
  @@map("verification")
}

model Question {
  id           String                   @id @default(cuid())
  title        String                   @db.VarChar(255)
  description  String
  authorId     String
  views        Int                      @default(0)
  createdAt    DateTime                 @default(now())
  updatedAt    DateTime                 @updatedAt
  isDeleted    Boolean                  @default(false)
  attempt      String
  answersCount Int                      @default(0)
  // Community relation
  communityId  String?
  answers      Answer[]
  author       User                     @relation(fields: [authorId], references: [id])
  community    Community?               @relation(fields: [communityId], references: [id])
  questionTags TagsOnQuestions[]

  @@index([authorId])
  @@index([createdAt])
  @@index([communityId])
  @@map("question")
}

model Answer {
  id         String    @id @default(cuid())
  content    String
  authorId   String
  questionId String
  isAccepted Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  isDeleted  Boolean   @default(false)
  author     User      @relation(fields: [authorId], references: [id])
  question   Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  comments   Comment[]
  votes      Vote[]

  @@index([authorId])
  @@index([questionId])
  @@index([isAccepted])
  @@map("answer")
}

model Tag {
  id             String            @id @default(cuid())
  name           String            @unique @db.VarChar(50)
  description    String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  questionTags   TagsOnQuestions[]
  usersFollowing TagsOnUsers[]

  @@map("tag")
}

model TagsOnQuestions {
  questionId String
  tagId      String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([questionId, tagId])
  @@map("tags_on_questions")
}

model Vote {
  id        String   @id @default(cuid())
  userId    String
  answerId  String
  type      VoteType
  createdAt DateTime @default(now())
  answer    Answer   @relation(fields: [answerId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, answerId])
  @@index([answerId])
  @@map("vote")
}

model Notification {
  id          String           @id @default(cuid())
  recipientId String
  type        NotificationType
  message     String
  isRead      Boolean          @default(false)
  entityId    String?
  entityType  String?
  createdAt   DateTime         @default(now())
  recipient   User             @relation(fields: [recipientId], references: [id])

  @@index([recipientId, isRead, createdAt])
  @@map("notification")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  answerId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)
  answer    Answer   @relation(fields: [answerId], references: [id], onDelete: Cascade)
  author    User     @relation(fields: [authorId], references: [id])

  @@index([authorId])
  @@index([answerId])
  @@map("comment")
}

model TagsOnUsers {
  userId    String
  tagId     String
  createdAt DateTime @default(now())
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, tagId])
  @@map("tags_on_users")
}

model Badge {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?
  imageUrl    String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userBadges  UserBadges[]

  @@map("badge")
}

model UserBadges {
  userId    String
  badgeId   String
  awardedAt DateTime @default(now())
  badge     Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, badgeId])
  @@map("user_badges")
}

model Community {
  id          String             @id @default(cuid())
  name        String             @unique
  description String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  imageUrl    String?
  bannerUrl   String?
  isPrivate   Boolean            @default(false)
  ownerId     String
  owner       User               @relation("CommunityOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members     CommunityMembers[]
  questions   Question[]

  @@map("community")
}

model CommunityMembers {
  userId      String
  communityId String
  role        CommunityRole @default(MEMBER)
  joinedAt    DateTime      @default(now())
  user        User          @relation("CommunityMember", fields: [userId], references: [id], onDelete: Cascade)
  community   Community     @relation(fields: [communityId], references: [id], onDelete: Cascade)

  @@id([userId, communityId])
  @@map("community_members")
}

enum UserRole {
  guest
  user
  admin
}

enum NotificationType {
  ANSWER_TO_QUESTION
  COMMENT_ON_ANSWER
  MENTION
  ANSWER_ACCEPTED
  VOTE_THRESHOLD
  BADGE_EARNED
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

enum CommunityRole {
  MEMBER
  ADMIN
  OWNER
}
